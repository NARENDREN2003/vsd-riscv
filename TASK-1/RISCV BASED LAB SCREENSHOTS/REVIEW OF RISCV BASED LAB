//RISCV BASED LAB
We have to do the same compilation of our code using RISCV gcc compiler. 
Follow the given steps:(Avoid the quotation marks)
       Open the terminal and run the given command:
             "cat sum_1ton.c"
       Using the cat command, the entire C code will be displayed on the terminal. Now we need to run the following command to compile the code in riscv64 gcc compiler:
              "riscv64-unknown-elf-gcc -O1 -mabi=lp64 -march=rv64i -o sum_1ton.o sum_1ton.c" 
       Open a new terminal and run the given command:
              "riscv64-unknown-elf-objdump -d sum_1ton.o"
       The Assembly Language code of the  C code will be displayed on the terminal. Type /main to locate the main section of our code.


KEYWORDS DESCRIPTION:
-d           : This command  is used to disassemble only the executable sections of a RISC-V binary. 
               This means it will extract and display the assembly instructions from sections marked as executable (such as .text) without dumping non-executable sections like .data or .bss.

-mabi=lp64   : This instruction tells that the ABI (Application Binary Interface) to use lp64, which is for 64-bit integer, long and pointer size. 
               This ABI is not floating-point registers. This ABI is used for 64-bit RISCV architecture.

-march=rv64i : This command specifies the target RISC-V architecture when compiling a program.
               It tells the compiler to generate code for a 64-bit RISC-V processor that implements only the base integer instruction set (I), without any additional extensions like floating-point (F), atomic operations (A), or compressed instructions (C).
               This intruction tells that the architecture that we use, which is rv64i, indicates the 64-bit RISCV base integer instruction set. 
               This also confirms the targeting of 64-bit architecture.

riscv-objdump: This command is a tool used to disassemble and inspect RISC-V binary files. 
               It is part of the GNU Binutils package and is essential for debugging and analyzing RISC-V executables, object files, and libraries. 
               
-Ofast       : The option -Ofast in the command riscv64-unknown-elf-gcc -Ofast -mabi=lp64 -march=rv64i -o sum1ton.o sum1ton.c is a compiler optimization flag used with the GNU Compiler Collection (GCC). 
               This command enables -ffast-math, which can cause small inaccuracies in floating-point calculations but significantly boosts performance.
               The use of -Ofast is typically chosen for applications where execution speed is critical and where deviations from standard behavior are acceptable.
               This flag is used to instruct the compiler to optimize the generated code for maximum speed.
               
-O1          : This options is an optimization level that tells the compiler to optimize the generated code but without greatly increasing compilation time. 
               -O1 aims to reduce code size and execution time while keeping the compilation process relatively quick.

